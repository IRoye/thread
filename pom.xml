<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.roye</groupId>
    <artifactId>thred</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>3.3.1</version>
        </dependency>
        <dependency>
            <groupId>ojdbc</groupId>
            <artifactId>ojdbc</artifactId>
            <version>6</version>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>2.7.8</version>
        </dependency>
        <dependency>
            <groupId>com.ibm.db2</groupId>
            <artifactId>db2jcc</artifactId>
            <version>4.0</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.9</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.10.0</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.22</version>
        </dependency>
    </dependencies>

    <!-- 配置maven打包 -->
    <build>
        <finalName>tpsline</finalName>
        <plugins>
            <!-- 打包避开test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                    <compilerArguments>
                        <extdirs>lib</extdirs><!--指定外部lib-->
                    </compilerArguments>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                此时会在classpath下面把那个带时间戳的给添加上去，然后我们
                在依赖打包的时候，打的是正确的，所以两头会对不上，报错。-->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                            <addClasspath>true</addClasspath>
                            <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个
                            jar本身和依赖包在同一级目录，则不需要添加-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- jar启动入口类-->
                            <mainClass>App</mainClass>
                        </manifest>
                        <manifestEntries>
                            <!-- 在Class-Path下添加配置文件的路径 -->
                            <Class-Path>config/</Class-Path>
                            <!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
                            这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
                            文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
                            所有jar都在lib下，资源文件都在config下，lib和config是同级的 -->
                            <!-- 同时还需要注意另外一个问题，假如你的pom文件里面配置了
                            <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
                            这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
                            这个地方，用空格隔开就行-->
                        </manifestEntries>
                    </archive>
                    <!-- jar包的位置-->
                    <!--<outputDirectory>${project.build.directory}/lib</outputDirectory>-->
                    <includes>
                        <!-- 打jar包时，只打包class文件 -->
                        <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等-->
                        <include>**/*.class</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- 拷贝项目依赖包到lib/目录下 -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <!-- 间接依赖也拷贝 -->
                            <excludeTransitive>false</excludeTransitive>
                            <!-- 带上版本号 -->
                            <stripVersion>false</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <!-- 一个execution就是一个目标输入位置，如果想把各种资源拆开放的话，就
                    可以创建多个execution，一个资源文件可以被拷贝多份 -->
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <!-- 资源文件的输出目录 -->
                            <outputDirectory>${project.build.directory}/config</outputDirectory>
                            <resources>
                                <!-- 资源文件的原始目录，有多个的话就多配几个 -->
                                <resource>
                                    <!-- 原始目录 -->
                                    <directory>src/main/resources</directory>
                                    <!-- 是否使用过滤器，如果是的话，需要配置一下才行
                                    这个后续再研究，这边没有使用到 -->
                                    <filtering>true</filtering>
                                    <!-- 包含哪些文件以及去除调哪些文件等等 -->
                                    <includes>
                                        <include>**/*.*</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>